<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib">

    <FontFamily x:Key="Font">Assets\segoeui.ttf#Segoe UI</FontFamily>
    <FontFamily x:Key="LightFont">Assets\segoeuil.ttf#Segoe UI Light</FontFamily>
    <FontFamily x:Key="SemiboldFont">Assets\seguisb.ttf#Segoe UI Semibold</FontFamily>

    <!-- FONT SIZES-->
    <!--<System:String x:Key="SmallSize">10</System:String>
    <System:String x:Key="RegularSize">11</System:String>
    <System:String x:Key="RegularPlusSize">12</System:String>
    <System:String x:Key="MediumSize">15</System:String>
    <System:String x:Key="LargeSize">18</System:String>
    <System:String x:Key="ExtraMediumSize">32</System:String>-->
    
    <!-- COLORS/BRUSHES-->
    <Color x:Key="FgColor">#FF222222</Color>
    <Color x:Key="InvalidBorderColor">#FFA82020</Color>
    <Color x:Key="BlueColor">#FF4091AD</Color>
    <Color x:Key="OuterBorderFocusedColor">#FF3980B3</Color>
    <Color x:Key="SelectColor">#FF9DD8F8</Color>
    <Color x:Key="FgDisabledColor">#FF999999</Color>
    <Color x:Key="FgTodayColor">White</Color>
    <Color x:Key="GrayColor">#FF8E9091</Color>
    <Color x:Key="BgColor">#FFEEEEEE</Color>
    <Color x:Key="MouseDownBgColor">#0A000000</Color>
    <Color x:Key="DisabledButtonTextColor">#FFAFAFAF</Color>
    <Color x:Key="DisabledOverlayColor">#BBEBEBEB</Color>
    <Color x:Key="MouseOverBgColor">#33FFFFFF</Color>
    <Color x:Key="DarkBlueColor">#0080C0</Color>
    <Color x:Key="WhiteColor">#FFFFFFFF</Color>
    <Color x:Key="NavigationMenuBackgroundColor">#E7E7E7</Color>
    <Color x:Key="BorderRestColor">#FFC3C7CB</Color>

    <SolidColorBrush x:Key="MouseDownBgBrush" Color="{StaticResource MouseDownBgColor}"/>
    <SolidColorBrush x:Key="InvalidBorderBrush" Color="{StaticResource InvalidBorderColor}"/>
    <SolidColorBrush x:Key="BorderRestBrush" Color="{StaticResource BorderRestColor}"/>
    <SolidColorBrush x:Key="NavigationMenuBackgroundBrush" Color="{StaticResource NavigationMenuBackgroundColor}" />
    <SolidColorBrush x:Key="GrayBrush" Color="{StaticResource GrayColor}" />
    <SolidColorBrush x:Key="BgBrush" Color="{StaticResource BgColor}" />
    <SolidColorBrush x:Key="FgBrush" Color="#FF222222"/>
    <SolidColorBrush x:Key="FgDisabledBrush" Color="#FF999999"/>
    <SolidColorBrush x:Key="FgErrorBrush" Color="Firebrick"/>
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
    <SolidColorBrush x:Key="ExpanderBackground" Color="#FFEFEFEF"/>
    <SolidColorBrush x:Key="ExpanderBackgroundHover" Color="#FFF9F9F9"/>
    <SolidColorBrush x:Key="OuterBorder" Color="#FF7C7C7C"/>
    <SolidColorBrush x:Key="OuterBorderLight" Color="#FFc0c0c0"/>
    <SolidColorBrush x:Key="OuterBorderFocused" Color="#FF3980B3"/>
    <SolidColorBrush x:Key="InnerBorder" Color="White"/>
    <SolidColorBrush x:Key="InnerBorderFocused" Color="#FF2DD3FE"/>
    <SolidColorBrush x:Key="OuterBgDisabledOpacityMask" Color="#66D3D3D3"/>
    <SolidColorBrush x:Key="DisabledOverlayBrush" Color="{StaticResource DisabledOverlayColor}"/>
    <SolidColorBrush x:Key="MouseOverBgBrush" Color="{StaticResource MouseOverBgColor}"/>
    <SolidColorBrush x:Key="BorderFocusBrush" Color="{StaticResource DarkBlueColor}" />
    <SolidColorBrush x:Key="DarkBlueBrush" Color="{StaticResource DarkBlueColor}" />
    <SolidColorBrush x:Key="WhiteBrush" Color="{StaticResource WhiteColor}" />

    <LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF" Offset="0.0"/>
        <GradientStop Color="#EEE" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="CalendarBGBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF9DD8F8" Offset="0"/>
        <GradientStop Color="#FFECF0F4" Offset="0.16"/>
        <GradientStop Color="#FFFCFCFD" Offset="0.16"/>
        <GradientStop Color="White" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarTopHighlight" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#80FFFFFF"/>
        <GradientStop Color="#00FFFFFF" Offset="0.396"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#00FFFFFF" Offset="0"/>
        <GradientStop Color="#7FFFFFFF" Offset="0.4"/>
        <GradientStop Color="#7FFFFFFF" Offset="0.6"/>
        <GradientStop Color="#00FFFFFF" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TabItemSelectedBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFe1e1e1" Offset="0"/>
        <GradientStop Color="#FFFBFBFB" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OuterBgTopRest" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFCCCCCC" Offset="0"/>
        <GradientStop Color="#FFE5E5E5" Offset="1"/>
        <GradientStop Color="#FFE5E5E5" Offset="0.2"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OuterBgBottomRest" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFCCCCCC" Offset="1"/>
        <GradientStop Color="#FFE5E5E5" Offset="0"/>
        <GradientStop Color="#FFE5E5E5" Offset="0.8"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OuterBgLeftRest" EndPoint="1,0.5" StartPoint="0,0.5">
        <GradientStop Color="#FFECECEC" Offset="0"/>
        <GradientStop Color="#FFCFCFCF" Offset="1"/>
        <GradientStop Color="#FFECECEC" Offset="0.8"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OuterBgRightRest" EndPoint="1,0.5" StartPoint="0,0.5">
        <GradientStop Color="#FFECECEC" Offset="1"/>
        <GradientStop Color="#FFCFCFCF" Offset="0"/>
        <GradientStop Color="#FFECECEC" Offset="0.2"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OuterBgTopSelect" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFD8F0FD" Offset="0"/>
        <GradientStop Color="#FF9DD8F8" Offset="1"/>
        <GradientStop Color="#FFD8F0FD" Offset="0.8"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OuterBgBottomSelect" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFD8F0FD" Offset="1"/>
        <GradientStop Color="#FF9DD8F8" Offset="0"/>
        <GradientStop Color="#FFD8F0FD" Offset="0.2"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OuterBgLeftSelect" EndPoint="1,0.5" StartPoint="0,0.5">
        <GradientStop Color="#FFD8F0FD" Offset="0"/>
        <GradientStop Color="#FF9DD8F8" Offset="1"/>
        <GradientStop Color="#FFD8F0FD" Offset="0.8"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="OuterBgRightSelect" EndPoint="1,0.5" StartPoint="0,0.5">
        <GradientStop Color="#FFD8F0FD" Offset="1"/>
        <GradientStop Color="#FF9DD8F8" Offset="0"/>
        <GradientStop Color="#FFD8F0FD" Offset="0.2"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="InnerBgTop" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="Transparent" Offset="0.5"/>
        <GradientStop Color="#19FFFFFF" Offset="1"/>
        <GradientStop Color="#BFFFFFFF" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="InnerBgBottom" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="Transparent" Offset="0.5"/>
        <GradientStop Color="#19FFFFFF" Offset="0"/>
        <GradientStop Color="#BFFFFFFF" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="InnerBgRight" EndPoint="-0,0.5" StartPoint="1,0.5">
        <GradientStop Color="Transparent" Offset="0.5"/>
        <GradientStop Color="#19FFFFFF" Offset="1"/>
        <GradientStop Color="#BFFFFFFF" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="InnerBgLeft" EndPoint="-0,0.5" StartPoint="1,0.5">
        <GradientStop Color="Transparent" Offset="0.5"/>
        <GradientStop Color="#19FFFFFF" Offset="0"/>
        <GradientStop Color="#BFFFFFFF" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="InnerBgLight" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#7FFFFFFF" Offset="0.025"/>
        <GradientStop Color="White" Offset="0.075"/>
        <GradientStop Color="White" Offset="1"/>
    </LinearGradientBrush>

    <!--BASE STYLES-->
    <Style x:Key="FrameworkElementBaseStyle" TargetType="{x:Type FrameworkElement}" >
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Margin" Value="0" />
    </Style>
    
    <Style x:Key="BaseOuterBorderStyle" BasedOn="{StaticResource FrameworkElementBaseStyle}" TargetType="{x:Type Border}" >
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    
    <Style x:Key="OuterBorderStyle" BasedOn="{StaticResource BaseOuterBorderStyle}" TargetType="{x:Type Border}" >
        <Setter Property="BorderBrush" Value="{DynamicResource SMOuterBorderBrush}"/>
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource SMBackgroundBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource SMHoverOuterBorderBrush}" />
                <Setter Property="Background" Value="{DynamicResource SMHoverBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource SMDisabledOuterBorderBrush}" />
                <Setter Property="Background" Value="{DynamicResource SMDisabledBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource SMFocusedOuterBorderBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="InnerBorderStyle" BasedOn="{StaticResource FrameworkElementBaseStyle}"  TargetType="{x:Type Border}" >
        <Setter Property="BorderBrush" Value="{DynamicResource SMInnerBorderBrush}"/>
        <Setter Property="CornerRadius" Value="1" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False"></Trigger>
            <Trigger Property="IsMouseOver" Value="True"></Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextBoxBaseBorderStyle" BasedOn="{StaticResource OuterBorderStyle}" TargetType="{x:Type Border}" >
        <Setter Property="Background" Value="{DynamicResource SMTextBoxBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SMTextBoxBorderBrush}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource SMDisabledOuterBorderBrush}" />
                <Setter Property="Background" Value="{DynamicResource SMDisabledTextBoxBackgroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Focus Visual  -->
    <ControlTemplate x:Key="BaseFocusVisualCT">
        <Rectangle 
            Stroke="{DynamicResource SMFocusedInnerBorderBrush}" 
            StrokeDashArray="1 2" 
            StrokeThickness="1" 
            />
    </ControlTemplate>
    <Style x:Key="BaseFocusVisualStyle" >
        <Setter Property="Control.Template" Value="{DynamicResource BaseFocusVisualCT}" />
        <Setter Property="Control.Margin" Value="2" />
        <Setter Property="Control.SnapsToDevicePixels" Value="True" />
    </Style>
    
    <!-- RECTANGLE STYLES -->
    <Style x:Key="BaseBorderStyle" TargetType="Border">
        <Setter Property="BorderThickness" Value="1"  />
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>
    
    <Style x:Key="BaseRectangleStyle" TargetType="Rectangle">
        <Setter Property="StrokeThickness" Value="1"  />
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>

    <Style x:Key="ButtonRectanglePressedStyle" BasedOn="{StaticResource BaseRectangleStyle}" TargetType="Rectangle">
        <Setter Property="Fill" Value="{StaticResource MouseDownBgBrush}" />
    </Style>

    <Style x:Key="BorderDisabledStyle" BasedOn="{StaticResource BaseBorderStyle}" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource DisabledOverlayBrush}"/>
    </Style>

    <Style x:Key="RectangleDisabledButtonStyle" BasedOn="{StaticResource BaseRectangleStyle}" TargetType="Rectangle" />
    
    <Style x:Key="BorderFocusStyle" BasedOn="{StaticResource BaseBorderStyle}" TargetType="Border">
        <Setter Property="BorderBrush" Value="{StaticResource BorderFocusBrush}" />
    </Style>

    <Style x:Key="RectangleFocusStyle" BasedOn="{StaticResource BaseRectangleStyle}" TargetType="Rectangle">
        <Setter Property="Stroke" Value="{StaticResource BorderFocusBrush}" />
    </Style>

    <!-- BUTTON STYLES-->
    <ControlTemplate x:Key="CommandMenuButtonCT" TargetType="Button">
        <Grid x:Name="gLayoutRoot" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition GeneratedDuration="0" />
                        <VisualTransition GeneratedDuration="0:0:0.3" To="MouseOver" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverVisualElement" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedVisualElement" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimation Duration="0" To="{StaticResource DisabledButtonTextColor}" Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="contentControl"/>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DisabledVisualElement">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused"/>
                    <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="CheckedVisualElement" />
                            <ColorAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="contentControl"
                                                          Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="Black" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>

                    </VisualState>
                    <VisualState x:Name="Unchecked"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>

            <!-- start layout -->
            <Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
            <Rectangle x:Name="CheckedVisualElement" Opacity="0" Fill="{StaticResource DarkBlueBrush}" />
            <ContentControl x:Name="contentControl" 
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            Foreground="{TemplateBinding Foreground}"/>

            <Rectangle x:Name="MouseOverVisualElement" Opacity="0" Fill="{StaticResource MouseOverBgBrush}" />
            <Rectangle x:Name="PressedVisualElement" Style="{StaticResource ButtonRectanglePressedStyle}" Opacity="0" />
            <TextBlock x:Name="contentPresenter" Text="{TemplateBinding Content}" Style="{DynamicResource StandardButtonText}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            <Rectangle x:Name="DisabledVisualElement" Style="{StaticResource RectangleDisabledButtonStyle}" Visibility="Collapsed" />
            <Rectangle x:Name="FocusVisualElement" Style="{StaticResource RectangleFocusStyle}" Visibility="Collapsed" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="CommandMenuButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource DarkBlueBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="110" />
        <Setter Property="Template" Value="{StaticResource CommandMenuButtonCT}"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="MinimizeButton" TargetType="Button" >
        <Setter x:Uid="Setter_121" Property="HorizontalAlignment" Value="Left" />
        <Setter x:Uid="Setter_122" Property="VerticalAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Uid="MinimizeButtonControlTemplate">
                    <Grid x:Uid="MinimizeButtonGrid" >
                        <Image x:Uid="MinimizeButtonImage" Height="10" Width="10" Source="/Images/minimize_button_disabled.png" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="MinimizeButtonControlTemplate">
                            <Grid x:Uid="MinimizeButtonGrid">
                                <Image x:Uid="MinimizeButtonImage" Height="10" Width="10" Source="/Images/minimize_button.png" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="ControlTemplate" >
                            <Grid x:Uid="Grid">
                                <Image x:Uid="Image" Height="10" Width="10" Source="/Images/minimize_button_hover.png" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="ControlTemplate" >
                            <Grid x:Uid="Grid">
                                <Image x:Uid="Image" Height="10" Width="10" Source="/Images/minimize_button_disabled.png" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="CancelButton" TargetType="Button">
        <Setter x:Uid="Setter_121" Property="HorizontalAlignment" Value="Left" />
        <Setter x:Uid="Setter_122" Property="VerticalAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Uid="CancelButtonControlTemplate">
                    <Grid x:Uid="CancelButtonGrid">
                        <Image x:Uid="CancelButtonImage" Height="10" Width="10" Source="/Images/cancel_button_disabled.png" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="CancelButtonControlTemplate">
                            <Grid x:Uid="CancelButtonGrid">
                                <Image x:Uid="CancelButtonImage" Height="10" Width="10" Source="/Images/cancel_button.png" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="ControlTemplate" >
                            <Grid x:Uid="Grid">
                                <Image x:Uid="Image" Height="10" Width="10" Source="/Images/cancel_button_hover.png" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="ControlTemplate" >
                            <Grid x:Uid="Grid">
                                <Image x:Uid="Image" Height="10" Width="10" Source="/Images/cancel_button_disabled.png" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="OKButton" TargetType="Button">
        <Setter x:Uid="Setter_121" Property="HorizontalAlignment" Value="Left" />
        <Setter x:Uid="Setter_122" Property="VerticalAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Uid="OKButtonControlTemplate">
                    <StackPanel x:Uid="TempButtonGrid" Orientation="Horizontal">
                        <TextBlock Margin="10,0,0,0"  Name="OK" Text="OK" VerticalAlignment="Center" FontSize="18" FontWeight="Medium" Foreground="White" Height="Auto" Width="30"/>
                        <Image Margin='5,0,0,0' x:Uid="OKButtonImage" Height="40" Width="40" Source="/Images/ok.png"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="CancelButtonControlTemplate">
                            <StackPanel x:Uid="OKButtonGrid" Orientation="Horizontal" Background="Gray">
                                <TextBlock Margin="10,0,0,0" Name="OK" Text="OK" VerticalAlignment="Center" FontSize="18" FontWeight="Medium" Foreground="White" Height="Auto" Width="30"/>
                                <Image Margin='5,0,0,0' x:Uid="OKButtonImage" Height="40" Width="40" Source="/Images/ok.png"/>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="ControlTemplate" >
                            <StackPanel x:Uid="OKButtonGrid" Orientation="Horizontal">
                                <TextBlock Margin="10,0,0,0" Name="OK" Text="OK" VerticalAlignment="Center" FontSize="18" FontWeight="Medium" Foreground="White" Height="Auto" Width="30"/>
                                <Image Margin='5,0,0,0' x:Uid="OKButtonImage" Height="40" Width="40" Source="/Images/ok.png"/>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate x:Uid="ControlTemplate" >
                            <StackPanel x:Uid="OKButtonGrid" Orientation="Horizontal">
                                <TextBlock Margin="10,0,0,0" Name="OK" Text="OK" VerticalAlignment="Center" FontSize="18" FontWeight="Medium" Foreground="White" Height="Auto" Width="30"/>
                                <Image Margin='5,0,0,0' x:Uid="OKButtonImage" Height="40" Width="40" Source="/Images/ok.png"/>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- BORDER STYLES -->
    <CornerRadius x:Key="OuterBorderCornerRadius">1</CornerRadius>
    <CornerRadius x:Key="InnerBorderCornerRadius">0</CornerRadius>
    <Thickness x:Key="DefaultBorderThickness">1</Thickness>

    <Style x:Key="RootOuterBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="CornerRadius" Value="{StaticResource OuterBorderCornerRadius}"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style x:Key="RootInnerBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}"/>
        <Setter Property="CornerRadius" Value="{StaticResource InnerBorderCornerRadius}"/>
        <Setter Property="Background" Value="{DynamicResource InnerBgTop}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource InnerBorder}"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style x:Key="OuterBorderTopRestStyle" BasedOn="{StaticResource RootOuterBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource OuterBgTopRest}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorder}"/>
    </Style>

    <Style x:Key="OuterBorderBottomRestStyle" BasedOn="{StaticResource RootOuterBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource OuterBgBottomRest}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorder}"/>
    </Style>

    <Style x:Key="OuterBorderLeftRestStyle" BasedOn="{StaticResource RootOuterBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource OuterBgLeftRest}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorder}"/>
    </Style>

    <Style x:Key="OuterBorderRightRestStyle" BasedOn="{StaticResource RootOuterBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource OuterBgRightRest}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorder}"/>
    </Style>

    <Style x:Key="OuterBorderTopSelectStyle" BasedOn="{StaticResource RootOuterBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource OuterBgTopSelect}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorderFocused}"/>
    </Style>

    <Style x:Key="OuterBorderBottomSelectStyle" BasedOn="{StaticResource RootOuterBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource OuterBgBottomSelect}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorderFocused}"/>
    </Style>

    <Style x:Key="OuterBorderLeftSelectStyle" BasedOn="{StaticResource RootOuterBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource OuterBgLeftSelect}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorderFocused}"/>
    </Style>

    <Style x:Key="OuterBorderRightSelectStyle" BasedOn="{StaticResource RootOuterBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource OuterBgRightSelect}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorderFocused}"/>
    </Style>

    <Style x:Key="InnerTopBorderStyle" BasedOn="{StaticResource RootInnerBorderStyle}" TargetType="{x:Type Border}"/>

    <Style x:Key="InnerBottomBorderStyle" BasedOn="{StaticResource RootInnerBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource InnerBgBottom}"/>
    </Style>

    <Style x:Key="InnerBorderLeftStyle" BasedOn="{StaticResource RootInnerBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource InnerBgLeft}"/>
    </Style>

    <Style x:Key="InnerBorderRightStyle" BasedOn="{StaticResource RootInnerBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource InnerBgRight}"/>
    </Style>

    <Style x:Key="InnerBorderLightStyle" BasedOn="{StaticResource RootInnerBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource InnerBgLight}"/>
    </Style>

    <Style x:Key="InnerBorderTopFocusStyle" BasedOn="{StaticResource RootInnerBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{DynamicResource InnerBorderFocused}"/>
    </Style>

    <Style x:Key="InnerBorderBottomFocusStyle" BasedOn="{StaticResource RootInnerBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource InnerBgBottom}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource InnerBorderFocused}"/>
    </Style>

    <Style x:Key="InnerBorderLeftFocusStyle" BasedOn="{StaticResource RootInnerBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource InnerBgLeft}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource InnerBorderFocused}"/>
    </Style>

    <Style x:Key="InnerBorderRightFocusStyle" BasedOn="{StaticResource RootInnerBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource InnerBgRight}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource InnerBorderFocused}"/>
    </Style>
    
    <!-- RADIO BUTTON -->
    <PathGeometry x:Key="RadioButtonGlyph" 
        Figures="M5.5,3 C5.5,4.3807119 4.3807119,5.5 3,5.5 C1.6192881,5.5 0.5,4.3807119 0.5,3 C0.5,1.6192881 1.6192881,0.5 3,0.5 C4.3807119,0.5 5.5,1.6192881 5.5,3 z"/>

    <Style x:Key="RadioButtonContentPresenterStyle" 
        TargetType="{x:Type ContentPresenter}">
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <ControlTemplate x:Key="RadioButtonCT" 
        TargetType="{x:Type RadioButton}">
        <Grid x:Name="gLayoutRoot" 
            Margin="{TemplateBinding Margin}" 
            HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
            VerticalAlignment="{TemplateBinding VerticalAlignment}" 
            MinWidth="{TemplateBinding MinWidth}" 
            MinHeight="{TemplateBinding MinHeight}" 
            MaxWidth="{TemplateBinding MaxWidth}" 
            MaxHeight="{TemplateBinding MaxHeight}" 
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
            ClipToBounds="{TemplateBinding ClipToBounds}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="colBullet" 
                    Width="13"/>
                <ColumnDefinition x:Name="colContent" />
            </Grid.ColumnDefinitions>
            <Border x:Name="OuterBorder" 
                CornerRadius="6"
                Width="13" Height="13"
                Style="{DynamicResource OuterBorderBottomRestStyle}" 
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <Border x:Name="InnerBorder" 
                    CornerRadius="5"
                    Width="11" Height="11"
                    Style="{DynamicResource InnerBottomBorderStyle}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    Padding="1">
                    <Grid x:Name="gSelectIndicator">
                        <Ellipse x:Name="ellipse"
                            Width="5" Height="5" 
                            Fill="{DynamicResource OuterBorderFocused}" 
                            Visibility="Collapsed"/>
                        <Path x:Name="pathIndeterminate"
                            Visibility="Collapsed"
                            Stretch="Fill" 
                            SnapsToDevicePixels="true"
                            Stroke="{DynamicResource OuterBorderFocused}" 
                            Data="M3,9 L9,2.6666667" 
                            StrokeThickness="2.5"/>
                    </Grid>
                </Border>
            </Border>

            <ContentPresenter x:Name="ContentPresenter"
				RecognizesAccessKey="True"
                    Style="{StaticResource RadioButtonContentPresenterStyle}" 
                    ContentTemplate="{TemplateBinding ContentTemplate}" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    Grid.Column="1">
                <ContentPresenter.Resources>
                    <Style TargetType="{x:Type TextBlock}" >
                        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="ellipse" 
                    Value="Visible"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" 
                    Value="{DynamicResource OuterBorderBottomSelectStyle}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" 
                    Value="{DynamicResource OuterBorderBottomSelectStyle}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="OpacityMask" TargetName="OuterBorder" 
                    Value="{DynamicResource OuterBgDisabledOpacityMask}"/>
                <Setter Property="Foreground" 
                    Value="{DynamicResource FgDisabledBrush}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Style" TargetName="InnerBorder" 
                    Value="{DynamicResource InnerBorderBottomFocusStyle}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsThreeState" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="ellipse" 
                    Value="Collapsed"/>
                <Setter Property="Visibility" TargetName="pathIndeterminate" 
                    Value="Visible" />
            </MultiTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="StandardRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Margin" Value="3,2"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="MinWidth" Value="110"/>
        <Setter Property="MinHeight" Value="14"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="Template" Value="{StaticResource RadioButtonCT}"/>
    </Style>
    <!-- RADIO BUTTON -->

    <!--CHECKBOX STYLES -->
    <Style x:Key="CheckMarkStyle" 
        TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{DynamicResource OuterBorderFocused}" />
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <!--<Setter Property="Data" Value="{StaticResource CheckBoxGlyph}"/>-->
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        
    </Style><Style x:Key="CheckMarkIndeterminateStyle" 
        TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{DynamicResource OuterBorderFocused}" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <!--<Setter Property="Data" Value="{StaticResource CheckBoxGlyphIndeterminate}"/>-->
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- ContentCheckBox ContentPresenter Style Setter Properties -->
    <Style x:Key="CheckBoxContentPresenterStyle" 
        TargetType="{x:Type ContentPresenter}">
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    
    <!-- CheckBox ControlTemplate -->
    <ControlTemplate x:Key="CheckBoxCT" TargetType="{x:Type CheckBox}">
        <Grid x:Name="gLayoutRoot"
            HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
            VerticalAlignment="{TemplateBinding VerticalAlignment}" 
            MinWidth="{TemplateBinding MinWidth}" 
            MinHeight="{TemplateBinding MinHeight}" 
            MaxWidth="{TemplateBinding MaxWidth}" 
            MaxHeight="{TemplateBinding MaxHeight}" 
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
            Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="colCheck" 
                    Width="Auto"/>
                <ColumnDefinition x:Name="colContent" />
            </Grid.ColumnDefinitions>
            <Border x:Name="OuterBorder" 
                Width="13" Height="13"
                CornerRadius="0"
                Style="{DynamicResource OuterBorderBottomRestStyle}" 
                VerticalAlignment="Center" >
                <Border x:Name="InnerBorder" 
                    CornerRadius="0"
                    Style="{DynamicResource InnerBottomBorderStyle}"
					 Background="{DynamicResource InnerBgLight}"
					>
                    <Path x:Name="CheckMark"
                        FlowDirection="LeftToRight"  
                        Style="{StaticResource CheckMarkStyle}"/>
                </Border>
            </Border>
            <ContentPresenter
                Grid.Column="1"
                x:Name="ContentPresenter"
                Style="{StaticResource CheckBoxContentPresenterStyle}"
                RecognizesAccessKey="True">
                <ContentPresenter.Resources>
                    <Style TargetType="{x:Type TextBlock}" >
                        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderBottomSelectStyle}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderBottomSelectStyle}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="OpacityMask" TargetName="OuterBorder" Value="{DynamicResource OuterBgDisabledOpacityMask}"/>
                <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource FgDisabledBrush}"/>
                <Setter Property="Opacity" TargetName="ContentPresenter" Value=".65"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Style" TargetName="InnerBorder" Value="{DynamicResource InnerBorderBottomFocusStyle}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Visibility" TargetName="CheckMark" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter Property="Style" TargetName="CheckMark" Value="{StaticResource CheckMarkIndeterminateStyle}"/>
                <Setter Property="Visibility" TargetName="CheckMark" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- CheckBox Style Setter Properties -->
    <Style x:Key="StandardCheckBox" TargetType="{x:Type CheckBox}" >
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5,2"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="MinHeight" Value="13"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template" Value="{StaticResource CheckBoxCT}"/>
    </Style>
    
    <!-- DATA GRID STYLES-->
    <!-- Outer cell border for cells to match the rest of the datagrid. standard borders look funny. -->
    <Style x:Key="DataGridCellOuterBorderRestStyle" BasedOn="{StaticResource RootOuterBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorder}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
    </Style>

    <!-- SelectAll button template .. the top-left corner button that selects all cells -->
    <ControlTemplate x:Key="ButtonSelectAllCT" TargetType="{x:Type Button}">
        <Grid x:Name="gLayoutRoot"						
            MinWidth="{TemplateBinding MinWidth}" 
            MinHeight="{TemplateBinding MinHeight}" 			
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
            ClipToBounds="{TemplateBinding ClipToBounds}"			
            >
            <Border x:Name="OuterBorder"
                Style="{DynamicResource OuterBorderTopRestStyle}"
                CornerRadius="0">
                <Border x:Name="InnerBorder"
                    Style="{DynamicResource InnerTopBorderStyle}" 
                    CornerRadius="0" />
            </Border>
            <Polygon x:Name="Arrow"
                Fill="{DynamicResource OuterBorder}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Margin="0,0,3,3"
                Points="0,5 5,5 5,0" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderTopSelectStyle}" />
                <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource FgBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderTopSelectStyle}" />
                <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource FgBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SelectAll Button Style -->
    <Style x:Key="SelectAllButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="23"/>
        <Setter Property="Template" Value="{StaticResource ButtonSelectAllCT}" />
    </Style>

    <!-- DataGrid ScrollViewer ControlTemplate ... customized scrollviewer for the datagrid -->
    <ControlTemplate x:Key="DataGridScrollViewerCT" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="gLayoutRoot">
            <Grid.RowDefinitions>
                <RowDefinition x:Name="rowColHeaders" Height="Auto"/>
                <RowDefinition x:Name="rowContent" Height="*"/>
                <RowDefinition x:Name="rowHorizScroll" Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="colRowHeaders" Width="Auto" MinWidth="0"/>
                <!-- this is the top corner button -->
                <ColumnDefinition x:Name="colContent" Width="*"/>
                <ColumnDefinition x:Name="colVertScroll" Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="btnSelectAll"
                    Command="{x:Static DataGrid.SelectAllCommand}"
                    Style="{StaticResource SelectAllButtonStyle}" 
                    Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}"
                    Focusable="False">
                <Button.Visibility>
                    <Binding Path="HeadersVisibility" 
                            RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                        <Binding.ConverterParameter>
                            <DataGridHeadersVisibility>All</DataGridHeadersVisibility>
                        </Binding.ConverterParameter>
                    </Binding>
                </Button.Visibility>
            </Button>
            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" 
                    Grid.Column="1">
                <DataGridColumnHeadersPresenter.Visibility>
                    <Binding Path="HeadersVisibility" 
                            RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                        <Binding.ConverterParameter>
                            <DataGridHeadersVisibility>All</DataGridHeadersVisibility>
                        </Binding.ConverterParameter>
                    </Binding>
                </DataGridColumnHeadersPresenter.Visibility>
            </DataGridColumnHeadersPresenter>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" 
                    Content="{TemplateBinding Content}" 
                    ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                    ContentTemplate="{TemplateBinding ContentTemplate}" 
                    Grid.ColumnSpan="2" Grid.Row="1" 
                    CanContentScroll="{TemplateBinding CanContentScroll}" 
                    CanHorizontallyScroll="False" CanVerticallyScroll="False"/>
            <ScrollBar x:Name="PART_VerticalScrollBar" 
                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" 
                    Grid.Column="2" Grid.Row="1" 
                    Orientation="Vertical" 
                    ViewportSize="{TemplateBinding ViewportHeight}" 
                    Maximum="{TemplateBinding ScrollableHeight}" 
                    Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid x:Name="gHorizScroller" 
                    Grid.Column="1" Grid.Row="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="colSpacer" 
                            Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}"/>
                    <ColumnDefinition x:Name="colScrollBar" 
                            Width="*"/>
                </Grid.ColumnDefinitions>
                <ScrollBar x:Name="PART_HorizontalScrollBar" 
                        Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                        Grid.Column="1" 
                        Orientation="Horizontal" 
                        ViewportSize="{TemplateBinding ViewportWidth}" 
                        Maximum="{TemplateBinding ScrollableWidth}" 
                        Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Grid>
        </Grid>
    </ControlTemplate>
    
    <!-- DataGrid ColumnHeader ControlTemplate -->
    <ControlTemplate x:Key="DataGridColHeaderCT" TargetType="{x:Type DataGridColumnHeader}">
        <Grid x:Name="gLayoutRoot"
            MinHeight="{TemplateBinding MinHeight}" 			
            MaxHeight="{TemplateBinding MaxHeight}">
            <Grid.RowDefinitions>
                <RowDefinition x:Name="rowSortArrow" Height="8" />
                <RowDefinition x:Name="rowContent"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="8" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="8" />
            </Grid.ColumnDefinitions>
            <Border x:Name="OuterBorder" 
                Grid.ColumnSpan="3"
				Grid.RowSpan="2"
				BorderThickness="0,1"
                Style="{DynamicResource OuterBorderTopRestStyle}"
                CornerRadius="0"
                >

                <Border x:Name="InnerBorder"
                    Grid.RowSpan="2"
					BorderThickness="0,1"
                    Style="{DynamicResource InnerTopBorderStyle}"
                    CornerRadius="0" />

            </Border>

            <Grid x:Name="gSortArrows"
				Grid.Column="1"
				Margin="0,2,0,0">
                <Path x:Name="UpArrow" 
	                Grid.Column="1"
					Fill="{DynamicResource FgDisabledBrush}" 
	                HorizontalAlignment="Center" 
	                VerticalAlignment="Center"
	                Visibility="Hidden"
	                Data="M 0 4 L 8 4 L 4 0 Z"/>
                <Path x:Name="DownArrow" 
					Grid.Column="1"
	                Fill="{DynamicResource FgDisabledBrush}" 
	                HorizontalAlignment="Center" 
	                VerticalAlignment="Center" 
	                Visibility="Hidden"
	                Data="M 0 0 L 4 4 L 8 0 Z"/>
            </Grid>

            <Grid x:Name="gHeaderGrid" 
				Grid.Column="1" Grid.Row="1" >

                <ContentPresenter x:Name="cpHeaderContent" 
					HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
					SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
	                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <ContentPresenter.Resources>
                        <Style TargetType="{x:Type TextBlock}" >
                            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                        </Style>
                    </ContentPresenter.Resources>
                </ContentPresenter>

            </Grid>

            <Thumb x:Name="PART_LeftHeaderGripper" 
                HorizontalAlignment="Left" 
                Style="{DynamicResource DataGridColLeftThumbStyle}"
                Grid.Column="0" Grid.RowSpan="2"
                />
            <Thumb x:Name="PART_RightHeaderGripper" 
                HorizontalAlignment="Right" 
                Style="{DynamicResource DataGridColRightThumbStyle}"
                Grid.Column="2" Grid.RowSpan="2"
                />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="SortDirection" Value="Descending">
                <Setter TargetName="UpArrow" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="DownArrow" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="SortDirection" Value="Ascending">
                <Setter TargetName="DownArrow" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="UpArrow" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="DownArrow" Property="Fill" Value="{DynamicResource FgBrush}"/>
                <Setter TargetName="UpArrow" Property="Fill" Value="{DynamicResource FgBrush}"/>
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderTopSelectStyle}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="OpacityMask" TargetName="OuterBorder" Value="{DynamicResource OuterBgDisabledOpacityMask}"/>
                <Setter Property="Foreground" Value="{DynamicResource FgDisabledBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderTopSelectStyle}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- DataGrid RowHeader Gripper Style -->
    <Style x:Key="DataGridRowHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="3"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeNS"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="GripperBorder" 
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGrid RowHeader ControlTemplate -->
    <!-- pathRowSelected provides a > arrow that rotates down when a row with details is selected. -->
    <!-- uncomment the sections below to show it when your DataGrid uses RowDetails, if desired. -->
    <ControlTemplate x:Key="DataGridRowHeaderCT" TargetType="{x:Type DataGridRowHeader}">
        <Grid x:Name="gLayoutRoot">
            <Border x:Name="OuterBorder" 
                Style="{DynamicResource OuterBorderTopRestStyle}"
                CornerRadius="0"
                Padding="{TemplateBinding Padding}" 
                >

                <Border x:Name="InnerBorder"
                    Style="{DynamicResource InnerTopBorderStyle}"
                    CornerRadius="0"				 
                    />
            </Border>

            <Path x:Name="pathRowSelected"
                StrokeThickness="0" 
                HorizontalAlignment="Center" 
                VerticalAlignment="Center"
                Margin="0,3,0,0" 
                Stretch="UniformToFill"
                Height="6" Width="6" 
                SnapsToDevicePixels="false" 
                Data="M 0,1 1,1 L 1,0" 
                RenderTransformOrigin="0.5,0.5" 
				Visibility="Collapsed"
                Fill="{DynamicResource FgDisabledBrush}">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform Angle="-45"/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>

            <Thumb x:Name="PART_TopHeaderGripper"
                Style="{StaticResource DataGridRowHeaderGripperStyle}"
                VerticalAlignment="Top"/>
            <Thumb x:Name="PART_BottomHeaderGripper" 
                Style="{StaticResource DataGridRowHeaderGripperStyle}"
                VerticalAlignment="Bottom"/>
        </Grid>
        <ControlTemplate.Triggers>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="DataGrid.RowDetailsVisibilityMode" Value="Visible"/>
                    <Condition Property="IsRowSelected" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Fill" TargetName="pathRowSelected" Value="{DynamicResource FgBrush}"/>
                <Setter Property="Visibility" TargetName="pathRowSelected" Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="DataGrid.RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
                    <Condition Property="IsRowSelected" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Fill" TargetName="pathRowSelected" Value="{DynamicResource FgBrush}"/>
                <Setter Property="Visibility" TargetName="pathRowSelected" Value="Visible"/>
            </MultiTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderTopSelectStyle}"/>
                <Setter Property="Fill" TargetName="pathRowSelected" Value="{DynamicResource FgBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="OpacityMask" TargetName="OuterBorder" Value="{DynamicResource OuterBgDisabledOpacityMask}"/>
                <Setter Property="Foreground" Value="{DynamicResource FgDisabledBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderTopSelectStyle}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- DataGrid Cell ControlTemplate -->
    <ControlTemplate x:Key="DataGridCellCT" TargetType="{x:Type DataGridCell}">
        <Grid x:Name="gLayoutRoot"			
            HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
            VerticalAlignment="{TemplateBinding VerticalAlignment}" 
            MinWidth="{TemplateBinding MinWidth}" 
            MinHeight="{TemplateBinding MinHeight}" 
            MaxWidth="{TemplateBinding MaxWidth}" 
            MaxHeight="{TemplateBinding MaxHeight}" 
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
            ClipToBounds="{TemplateBinding ClipToBounds}"			
            >
            <Border x:Name="OuterBorder"
                Style="{StaticResource DataGridCellOuterBorderRestStyle}"
                >
                <Border x:Name="InnerBorder" 
                    BorderThickness="1"
					Background="Transparent"
					/>
                <!--Style="{DynamicResource RootInnerBorderStyle}"-->
            </Border>
            <ContentPresenter x:Name="CellContent" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                    Content="{TemplateBinding Content}" 
                    ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    Margin="3,2" 
                    VerticalAlignment="Center" 										
                    />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderTopSelectStyle}"/>
                <Setter Property="Style" TargetName="InnerBorder" Value="{DynamicResource RootInnerBorderStyle}"/>
                <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource OuterBgTopSelect}"/>
                <Setter Property="Foreground" Value="{DynamicResource FgBrush}"/>
                <Setter Property="BorderThickness" TargetName="OuterBorder" Value="0,0,0,1"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderTopSelectStyle}"/>
                <Setter Property="Style" TargetName="InnerBorder" Value="{DynamicResource RootInnerBorderStyle}"/>
                <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource OuterBgTopSelect}"/>
                <Setter Property="Foreground" Value="{DynamicResource FgBrush}"/>
                <Setter Property="BorderThickness" TargetName="OuterBorder" Value="0,0,0,1"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Style" TargetName="InnerBorder" Value="{DynamicResource InnerBorderTopFocusStyle}"/>
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderTopSelectStyle}"/>
                <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource InnerBorderFocused}"/>
                <Setter Property="BorderThickness" TargetName="OuterBorder" Value="0,0,0,1"/>
                <Setter Property="Foreground" Value="{DynamicResource FgBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- DataGrid ControlTemplate -->
    <ControlTemplate x:Key="DataGridCT" TargetType="{x:Type DataGrid}">
        <Grid x:Name="gLayoutRoot"
            Margin="{TemplateBinding Margin}" 
            HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
            VerticalAlignment="{TemplateBinding VerticalAlignment}" 
            MinWidth="{TemplateBinding MinWidth}" 
            MinHeight="{TemplateBinding MinHeight}" 
            MaxWidth="{TemplateBinding MaxWidth}" 
            MaxHeight="{TemplateBinding MaxHeight}" 
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
            ClipToBounds="{TemplateBinding ClipToBounds}">
            <Border x:Name="OuterBorder"
                Style="{DynamicResource OuterBorderTopRestStyle}">
                <Border x:Name="InnerBorder" 
                        Style="{DynamicResource InnerBorderLightStyle}"/>
            </Border>
            <ScrollViewer x:Name="DG_ScrollViewer"
                Template="{StaticResource DataGridScrollViewerCT}"
                Focusable="False">
                <ItemsPresenter x:Name="RowItems" 
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </ScrollViewer>
        </Grid>
    </ControlTemplate>

    <!-- DataGrid Column Right Thumb Style Setter Properties -->
    <Style x:Key="DataGridColRightThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource OuterBorderLight}"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="RightThumbBorder"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0,0,1,0"
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGrid Column Left Thumb Style Setter Properties -->
    <Style x:Key="DataGridColLeftThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="LeftThumbBorder"
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGrid ColumnHeader Style Setter Properties -->
    <Style x:Key="DataGridColHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="MaxHeight" Value="35"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Template" Value="{StaticResource DataGridColHeaderCT}" />
    </Style>

    <!-- DataGrid Cell Style Setter Properties -->
    <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="23"/>
        <Setter Property="Foreground" Value="{DynamicResource FgBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template" Value="{StaticResource DataGridCellCT}" />
    </Style>

    <!-- DataGrid RowHeader Style Setter Properties -->
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Width" Value="15"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="Template" Value="{StaticResource DataGridRowHeaderCT}"/>
    </Style>

    <!-- DataGrid Style Setter Properties -->
    <Style x:Key="StandardDataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="MinWidth" Value="110"/>
        <Setter Property="MinHeight" Value="120"/>
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource ExpanderBackground}" />
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource OuterBorderLight}"/>
        <Setter Property="EnableRowVirtualization" Value="False"/>
        <Setter Property="EnableColumnVirtualization" Value="False"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="GridLinesVisibility" Value="Vertical" />
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource DataGridColHeaderStyle}"/>
        <Setter Property="ColumnHeaderHeight" Value="27"/>
        <Setter Property="CellStyle" Value="{StaticResource DataGridCellStyle}"/>
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="SelectionUnit" Value="FullRow" />
        <Setter Property="Template" Value="{StaticResource DataGridCT}" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="MinHeight" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsGrouping" Value="True">
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- DATA GRID STYLES-->
    
    <!-- TEXT BLOCK STYLES -->
    <Style x:Key="StandardButtonText" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Segoe UI Regular"/>
        <!--<Setter Property="FontSize" Value="{StaticResource MediumSize}"/>-->
        <Setter Property="Foreground" Value="{StaticResource WhiteBrush}"/>
    </Style>

    <Style x:Key="WizardStepDescriptionLabelStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Segoe UI Regular"/>
        <!--<Setter Property="FontSize" Value="{StaticResource RegularSize}"/>-->
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Height" Value="30"></Setter>
    </Style>

    <!-- TEXT BOX STYLES -->
    <ControlTemplate x:Key="TextBoxCT" TargetType="{x:Type TextBoxBase}" >
        <Grid x:Name="gLayoutRoot"
            HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
            VerticalAlignment="{TemplateBinding VerticalAlignment}" 
            MaxWidth="{TemplateBinding MaxWidth}" 
            MaxHeight="{TemplateBinding MaxHeight}" 
            MinWidth="{TemplateBinding MinWidth}" 
            MinHeight="{TemplateBinding MinHeight}" 
			Width="{TemplateBinding Width}"
			Height="{TemplateBinding Height}"
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
            ClipToBounds="{TemplateBinding ClipToBounds}">
            <Border x:Name="OuterBorder" 
                    Background="{StaticResource WhiteBrush}" BorderBrush="{StaticResource BorderRestBrush}" BorderThickness="1" />
            <ScrollViewer x:Name="PART_ContentHost" 
                Margin="{TemplateBinding Padding}"
                BorderThickness="0"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                />
        </Grid>
        <ControlTemplate.Triggers>
            <!--<Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Style" TargetName="OuterBorder" Value="{DynamicResource OuterBorderBottomSelectStyle}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="OpacityMask" TargetName="OuterBorder" Value="{DynamicResource OuterBgDisabledOpacityMask}"/>
                <Setter Property="Foreground" Value="{DynamicResource FgDisabledBrush}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Style" TargetName="InnerBorder" Value="{DynamicResource InnerBorderBottomFocusStyle}"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="StandardTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Margin" Value="5,2"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="Foreground" Value="#646464"/>
        <Setter Property="FontFamily" Value="Segoe UI Regular"/>
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Template" Value="{StaticResource TextBoxCT}"/>
    </Style>

    <!--<Style x:Key="ReadonlyTextBox" TargetType="TextBox" BasedOn="{StaticResource StandardTextBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="CaretBrush" Value="Transparent" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="Foreground" Value="Gray" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid x:Name="RootElement">
                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="1" 
                                Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid>
                                <ScrollViewer x:Name="ContentElement" Padding="{TemplateBinding Padding}" BorderThickness="0" IsTabStop="False"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    <!-- TEXT BOX STYLES -->

    <!--- PROGRESSBAR STYLES -->
    <ControlTemplate x:Key="DefaultProgressBarCT" TargetType="ProgressBar">
        <Grid x:Name="Root">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Determinate">
                    </VisualState>
                    <VisualState x:Name="Indeterminate">
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimation Storyboard.TargetName="IndeterminateGradientFill"
								Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.Transform).(TransformGroup.Children)[0].X"
								Duration="00:00:.4" From="0" To="20" />
                            <ObjectAnimationUsingKeyFrames Duration="00:00:00" Storyboard.TargetName="IndeterminateRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Duration="00:00:00" Storyboard.TargetName="DeterminateRoot" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Collapsed</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>

            <!--Default Root Visuals for either type of ProgressBar-->
            <Border x:Name="ProgressBarTrack"
				Background="{TemplateBinding Background}"
				BorderThickness="{TemplateBinding BorderThickness}"
				BorderBrush="{TemplateBinding BorderBrush}" />

            <Grid x:Name="ProgressBarRootGrid" Height="{TemplateBinding Height}" >
                <!-- Overlay for determinate background color that provides the striped appearance -->
                <Image Source="/Images/loader_icon.png" Margin="0,15,10,20" Height="37" />

                <!-- Beginning of Indeterminate Progress Bar Visuals-->
                <Grid x:Name="IndeterminateRoot"
					Visibility="Collapsed">

                    <Rectangle x:Name="IndeterminateSolidFill"
						StrokeThickness="1"
						Margin="{TemplateBinding BorderThickness}"
						Fill="{TemplateBinding Foreground}"
						Opacity="1"
						RenderTransformOrigin="0.5,0.5" />

                    <Rectangle x:Name="IndeterminateGradientFill"
						StrokeThickness="1"
						Margin="{TemplateBinding BorderThickness}"
						Opacity="0.5" >
                        <Rectangle.Fill>
                            <LinearGradientBrush SpreadMethod="Repeat" MappingMode="Absolute" EndPoint="0,1" StartPoint="20,1">
                                <LinearGradientBrush.Transform >
                                    <TransformGroup>
                                        <TranslateTransform X="0" />
                                        <SkewTransform AngleX="-30" />
                                    </TransformGroup>
                                </LinearGradientBrush.Transform>
                                <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                <GradientStop Color="#FFFFFFFF" Offset="0.35"/>
                                <GradientStop Color="#00FFFFFF" Offset="0.35"/>
                                <GradientStop Color="#00FFFFFF" Offset="0.85"/>
                                <GradientStop Color="#FFFFFFFF" Offset="0.85"/>
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                </Grid>

                <Grid x:Name="DeterminateRoot"
					Margin="1" >

                    <!--Background -->
                    <Rectangle x:Name="ProgressBarIndicator"
						HorizontalAlignment="Left"
						Margin="{TemplateBinding BorderThickness}"
						StrokeThickness="0.5"
						Fill="{TemplateBinding Foreground}"
						RenderTransformOrigin="0.5,0.5">
                    </Rectangle>

                </Grid>

            </Grid>
        </Grid>
    </ControlTemplate>

    <Style x:Key="DefaultProgressBarStyle" TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{StaticResource GrayBrush}"/>
        <Setter Property="Background" Value="{StaticResource BgBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource GrayBrush}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Maximum" Value="100" />
        <Setter Property="Height" Value="19" />
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="MinWidth" Value="200"/>
        <Setter Property="Template" Value="{StaticResource DefaultProgressBarCT}" />
    </Style>

    <ControlTemplate x:Key="myProgressBar" TargetType="{x:Type ProgressBar}">
        <Grid x:Name="myGrid">
            <Rectangle x:Name="rectangle" HorizontalAlignment="Left">
                <Rectangle.Fill>
                    <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                        <GradientStop Color="White" Offset="0"/>
                        <GradientStop Color="Lime" Offset="0.5"/>
                        <GradientStop Color="Green" Offset="0.75"/>
                    </LinearGradientBrush>
                </Rectangle.Fill>
            </Rectangle>
        </Grid>
    </ControlTemplate>

    <!--- PROGRESSBAR STYLES -->
</ResourceDictionary>